% hemorrhage simulation

sus = phantom3d(256);
sus = permute(sus,[2 1 3]);
sus = flipdim(sus,2);

% nii = make_nii(sus);
% save_nii(nii,'sus.nii');



mag = phantom3d_mag_neg(256);
% mag(isinf(mag)) = 0;
mag = permute(mag,[2 1 3]);
mag = flipdim(mag,2);
mag = mag + 1;

% nii = make_nii(mag);
% save_nii(nii,'mag.nii');



% hemorrhage
load sus_local

% (40,35,48); (96,92,81)

% cropped out the hemorrhage
% sus_hemo = sus_local(40:97,35:92,48:81);
sus_hemo = sus_local(40:87,35:92,48:81);

nii = make_nii(sus_hemo);
save_nii(nii,'sus_hemo.nii');


% add the hemorrhage
% sus(43:100,23:80,110:143) = sus_hemo;
sus(53:100,33:90,110:143) = sus_hemo;

% nii = make_nii(sus);
% save_nii(nii,'sus.nii');

mag_hemo = sus_hemo;
mag_hemo(sus_hemo == 1.5) = 2;
mag_hemo(sus_hemo == 0) = 1;

% mag(43:100,23:80,110:143) = mag_hemo;
mag(53:100,33:90,110:143) = mag_hemo;
% nii = make_nii(mag);
% save_nii(nii,'mag.nii');



% switch dimension
sus = permute(sus,[3 2 1]);
mag = permute(mag,[3 2 1]);
nii = make_nii(sus);
save_nii(nii,'sus.nii');
nii = make_nii(mag);
save_nii(nii,'mag.nii');
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% field forward caculation

[Nx,Ny,Nz] = size(sus);
vox = [1,1,1];
% create K-space filter kernel D
FOV = vox.*[Nx,Ny,Nz];
FOVx = FOV(1);
FOVy = FOV(2);
FOVz = FOV(3);

x = -Nx/2:Nx/2-1;
y = -Ny/2:Ny/2-1;
z = -Nz/2:Nz/2-1;
[kx,ky,kz] = ndgrid(x/FOVx,y/FOVy,z/FOVz);
D = 1/3 - kz.^2./(kx.^2 + ky.^2 + kz.^2);

D(floor(Nx/2+1),floor(Ny/2+1),floor(Nz/2+1)) = 0;
D = fftshift(D);


B = real(ifftn(fftn(sus).*D));
nii = make_nii(B);
save_nii(nii,'B.nii');



ph = 2.675e8 * (B * 1e-6 * 1.5) * 40e-3;
nii = make_nii(ph,vox);
save_nii(nii,'ph.nii');

ph_wrp = angle(exp(1j*ph));
nii = make_nii(ph_wrp,vox);
save_nii(nii,'ph_wrp.nii');



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% downsample to 192^3
k = ifftshift(ifftn(ifftshift(mag.*exp(1j*ph))));
sz = size(k);
k_trun = k( sz(1)/4+1:sz(1)/4*3, sz(2)/4+1:sz(2)/4*3, sz(3)/4+1:sz(3)/4*3);
k_trun = padarray(k_trun,[64,64,64]);
% k_trun = k(33:224, 33:224, 33:224);
% k_trun = padarray(k_trun,[32,32,32]);
img_trun = fftshift(fftn(fftshift(k_trun)));
img_comp = img_trun;


% ph_ave = angle(img_trun);
% nii = make_nii(ph_ave);
% save_nii(nii,'ph_ave.nii');

% mag_ave = abs(img_trun);
% nii = make_nii(mag_ave);
% save_nii(nii,'mag_ave.nii');

% mask_hem = ones(size(ph_ave));
% mask_hem(mag_ave <= 0.5) = 0;
% nii = make_nii(mask_hem);
% save_nii(nii,'mask_hem.nii');



% add complex noise in real and imaginary part
% img_comp = mag.*exp(1j*ph);
% k = ifftshift(ifftn(ifftshift(img_comp)));

% complex noise
imsize = size(img_comp);
cgnoise = 0.1*randn(imsize) + i*0.1*randn(imsize);
img_comp_noise = img_comp + cgnoise;
% k_noise = k + cgnoise;

% img_comp_noise = fftshift(fftn(fftshift(k_noise)));

% img_real_noise = real(img_comp) + random('norm', 0, 0.1, imsize);
% img_imag_noise = imag(img_comp) + random('norm', 0, 0.1, imsize);
% img_comp_noise = img_real_noise + 1j*img_imag_noise;

nii = make_nii(abs(img_comp_noise));
save_nii(nii,'mag_noise.nii');
nii = make_nii(angle(img_comp_noise));
save_nii(nii,'ph_noise_wrp.nii'); 



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% unwrap !
% % 
fid = fopen('wrapped_phase.dat','w');
fwrite(fid,angle(img_comp_noise),'float');
fclose(fid);

mask = ones(size(img_comp_noise));
% mask(mag == 0) = 0;
mask = uint8(mask*255);

fid = fopen('mask.dat','w');
fwrite(fid,mask,'uchar');
fclose(fid);

% execute your command in linux terminal:
unix('./3DSRNCP wrapped_phase.dat mask.dat unwrapped_phase.dat 256 256 256') ;
% unix('./3DSRNCP wrapped_phase.dat mask.dat unwrapped_phase.dat 192 192 192') ;

fid = fopen('unwrapped_phase.dat','r');
unwrapped_phase = fread(fid,'float');
unwrapped_phase = reshape(unwrapped_phase,imsize);
fclose(fid);

nii = make_nii(unwrapped_phase,vox);
save_nii(nii,'unwrapped_phase.nii')


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% unwrap with Laplacian based method
unph_lap = unwrapLaplacian(angle(img_comp_noise), imsize, vox);
nii = make_nii(unph_lap, vox);
save_nii(nii,'unph_lap.nii');
lfs_lap = unph_lap./( 2.675e8 * 1e-6 * 1.5 * 40e-3 );
% lfs = unph_prelude2d./( 2.675e8 * 1e-6 * 1.5 * 40e-3 );
nii = make_nii(lfs_lap,vox);
save_nii(nii,'lfs_lap.nii');


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% scale back to field map
lfs = unwrapped_phase./( 2.675e8 * 1e-6 * 1.5 * 40e-3 );
% lfs = unph_prelude2d./( 2.675e8 * 1e-6 * 1.5 * 40e-3 );
nii = make_nii(lfs,vox);
save_nii(nii,'lfs.nii');



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
R = ones(imsize);
R(mag == 0.1) = 0;

% R_noise = ones(imsize);
% R_noise(abs(img_comp_noise) <= 0.4) = 0;

% weights = abs(img_comp_noise).*R
weights = abs(mag);
tv_reg = 1e-3;
sus_ph_regular = tvdi(lfs,ones(imsize),vox,tv_reg,weights,[],200);
nii = make_nii(sus_ph_regular);
save_nii(nii,['sus_ph_regular_' num2str(tv_reg) '.nii']);



% weights = abs(img_comp_noise).*R;
weights = abs(mag);
tv_reg = 1e-3;
sus_ph_regular_lap = tvdi(lfs_lap,ones(imsize),vox,tv_reg,weights,[],200);
nii = make_nii(sus_ph_regular_lap);
save_nii(nii,['sus_ph_regular_lap_' num2str(tv_reg) '.nii']);




% weights = abs(img_comp_noise).*R;
weights = abs(mag).*R;
% weights = abs(img_comp_noise);
tv_reg = 1e-3;
% sus_ph_regular_mask = tvdi(lfs,R,vox,tv_reg,weights,[],200);
sus_ph_regular_mask = tvdi(lfs,R,vox,tv_reg,weights,[],400);
nii = make_nii(sus_ph_regular_mask);
save_nii(nii,['sus_ph_regular_mask_noise' num2str(tv_reg) '.nii']);



% weights = abs(img_comp_noise).*R;
weights = abs(mag).*R;
% weights = abs(img_comp_noise);
tv_reg = 1e-3;
% sus_ph_regular_mask = tvdi(lfs,R,vox,tv_reg,weights,[],200);
sus_ph_regular_mask_lap = tvdi(lfs_lap,R,vox,tv_reg,weights,[],400);
nii = make_nii(sus_ph_regular_mask_lap);
save_nii(nii,['sus_ph_regular_mask_lap_noise' num2str(tv_reg) '.nii']);




% measure ROIs
ROI_1 = zeros(size(sus));
ROI_1(sus == 0.1) = 1;
ROI_1 = logical(ROI_1(:));

ROI_2 = zeros(size(sus));
ROI_2(sus == 0.15) = 1;
ROI_2 = logical(ROI_2(:));

ROI_3 = zeros(size(sus));
ROI_3(sus == 0.2) = 1;
ROI_3 = logical(ROI_3(:));

ROI_4 = zeros(size(sus));
ROI_4(sus == 0.25) = 1;
ROI_4 = logical(ROI_4(:));

ROI_5 = zeros(size(sus));
ROI_5(sus == 0.3) = 1;
ROI_5 = logical(ROI_5(:));

ROI_hemo = zeros(size(sus));
ROI_hemo(sus == 1.5) = 1;
ROI_hemo = logical(ROI_hemo(:));

ROI_bkg = zeros(size(sus));
ROI_bkg(sus == 0) = 1;
ROI_bkg = logical(ROI_bkg(:));


mean(sus_ph_regular_mask(ROI_1))
std(sus_ph_regular_mask(ROI_1))
mean(sus_ph_regular_mask_lap(ROI_1))
std(sus_ph_regular_mask_lap(ROI_1))


mean(sus_ph_regular_mask(ROI_2))
std(sus_ph_regular_mask(ROI_2))
mean(sus_ph_regular_mask_lap(ROI_2))
std(sus_ph_regular_mask_lap(ROI_2))


mean(sus_ph_regular_mask(ROI_3))
std(sus_ph_regular_mask(ROI_3))
mean(sus_ph_regular_mask_lap(ROI_3))
std(sus_ph_regular_mask_lap(ROI_3))


mean(sus_ph_regular_mask(ROI_4))
std(sus_ph_regular_mask(ROI_4))
mean(sus_ph_regular_mask_lap(ROI_4))
std(sus_ph_regular_mask_lap(ROI_4))


mean(sus_ph_regular_mask(ROI_5))
std(sus_ph_regular_mask(ROI_5))
mean(sus_ph_regular_mask_lap(ROI_5))
std(sus_ph_regular_mask_lap(ROI_5))


mean(sus_ph_regular_mask(ROI_hemo))
std(sus_ph_regular_mask(ROI_hemo))
mean(sus_ph_regular_mask_lap(ROI_hemo))
std(sus_ph_regular_mask_lap(ROI_hemo))


mean(sus_ph_regular_mask(ROI_bkg))
std(sus_ph_regular_mask(ROI_bkg))
mean(sus_ph_regular_mask_lap(ROI_bkg))
std(sus_ph_regular_mask_lap(ROI_bkg))
% % super-method

% %% esharp
% [ extendedLocalPhase, sharpLocalPhase ] = esharp(lfs,R);
% nii = make_nii(extendedLocalPhase);
% save_nii(nii,'esharp.nii');




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% LBV
R = ones(imsize);
R(mag == 0.1) = 0;
vox = [1 1 1];
lfs_lbv = LBV(lfs,R,imsize,vox,0.01,2); % strip 2 layers
mkdir('LBV');
nii = make_nii(lfs_lbv,vox);
save_nii(nii,'LBV/lfs_lbv.nii');
mask_lbv_remainbrain = ones(imsize);
mask_lbv_remainbrain(lfs_lbv==0) = 0;
nii = make_nii(mask_lbv_remainbrain);
save_nii(nii,['LBV/mask_lbv_remainbrain.nii']);

tv_reg = 1e-3;
weights = abs(img_comp_noise).*R.*mask_lbv_remainbrain;
sus_lbv_remainbrain = tvdi(lfs_lbv,mask_lbv_remainbrain,vox,tv_reg,weights,[],200); 
nii = make_nii(sus_lbv_remainbrain,vox);
save_nii(nii,['LBV/sus_lbv_remainbrain_' num2str(tv_reg) '.nii']);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% RESHARP
% smv_rad = 3;
% tik_reg = 1e-4;
% [lfs_resharp,mask_resharp] = resharp(lfs,R,vox,smv_rad,tik_reg);
% nii = make_nii(lfs_resharp,vox);
% save_nii(nii,'lfs_resharp.nii');



% % dipole field
% B_hemo = lfs - lfs_lbv;
% nii = make_nii(B_hemo);
% save_nii(nii,'B_hemo.nii');

% tv_reg = 5e-4;
% % weights = abs(img_comp_noise).*R;
% sus_lbv_hemo = tvdi(B_hemo,ones(imsize),vox,tv_reg,R,[],200); 
% nii = make_nii(sus_lbv_remainbrain,vox);
% save_nii(nii,['LBV/sus_lbv_hemo_' num2str(tv_reg) '.nii']);


sus_super = sus_lbv_remainbrain.*mask_lbv_remainbrain + sus_ph_regular_mask.*(1 - mask_lbv_remainbrain);
nii = make_nii(sus_super);
save_nii(nii,'sus_super.nii');




% baseline fix
x1 = ifftn(D.*fftn(1 - mask_lbv_remainbrain));
x2 = lfs - ifftn(D.*fftn(sus_super));
x1 = x1(:);
x2 = x2(:);
a = x1'*x2/(x1'*x1)

sus_super_fix = sus_super + a*(1 - mask_lbv_remainbrain);
nii = make_nii(sus_super_fix);
save_nii(nii,'sus_super_fix.nii');

